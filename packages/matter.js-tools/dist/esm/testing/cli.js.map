{
  "version": 3,
  "sources": ["../../../src/testing/cli.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport { Project } from \"../building/project.js\";\nimport { TestRunner } from \"./runner.js\";\n\nenum TestType {\n    esm = \"esm\",\n    cjs = \"cjs\",\n    web = \"web\",\n}\n\nexport async function main(argv = process.argv) {\n    const testTypes = new Set<TestType>();\n\n    let manual = false;\n\n    const args = await yargs(hideBin(argv))\n        .usage(\"Runs tests in packages adhering to matter.js standards.\")\n        .option(\"prefix\", {\n            alias: \"p\",\n            default: \".\",\n            type: \"string\",\n            describe: \"specify directory of package to test\",\n        })\n        .option(\"web\", {\n            alias: \"w\",\n            default: false,\n            type: \"boolean\",\n            describe: \"enable web tests in default test mode\",\n        })\n        .option(\"spec\", {\n            type: \"array\",\n            string: true,\n            describe: \"One or more paths of tests to run\",\n            default: \"test/**/*Test.ts\",\n        })\n        .option(\"fgrep\", { alias: \"f\", type: \"string\", describe: \"Only run tests matching this string\" })\n        .option(\"grep\", { alias: \"g\", type: \"string\", describe: \"Only run tests matching this regexp\" })\n        .option(\"invert\", { alias: \"i\", type: \"boolean\", describe: \"Inverts --grep and --fgrep matches\" })\n        .option(\"profile\", { type: \"boolean\", describe: \"Write profiling data to build/profiles (node only)\" })\n        .option(\"all-logs\", { type: \"boolean\", describe: \"Emit log messages in real time\" })\n        .option(\"force-exit\", { type: \"boolean\", describe: \"Force Node to exit after tests complete\" })\n        .command(\"*\", \"run all supported test types\")\n        .command(\"esm\", \"run tests on node (ES6 modules)\", () => testTypes.add(TestType.esm))\n        .command(\"cjs\", \"run tests on node (CommonJS modules)\", () => testTypes.add(TestType.cjs))\n        .command(\"web\", \"run tests in web browser\", () => testTypes.add(TestType.web))\n        .command(\"manual\", \"start test server and print URL for manual testing\", () => {\n            testTypes.add(TestType.web);\n            manual = true;\n        })\n        .strict().argv;\n\n    const project = new Project(args.prefix);\n\n    // If no test types are specified explicitly, run all enabled types\n    if (!testTypes.size) {\n        if (project.pkg.esm) {\n            testTypes.add(TestType.esm);\n        }\n        if (project.pkg.cjs) {\n            testTypes.add(TestType.cjs);\n        }\n        if (args.web) {\n            testTypes.add(TestType.web);\n        }\n    }\n\n    let esmBuilt = false;\n    async function buildEsm() {\n        if (esmBuilt) {\n            return;\n        }\n\n        await project.buildSource(\"esm\");\n        await project.buildTests(\"esm\");\n\n        esmBuilt = true;\n    }\n\n    const progress = project.pkg.start(\"Testing\");\n    const runner = new TestRunner(project.pkg, progress, args);\n\n    if (testTypes.has(TestType.esm)) {\n        await buildEsm();\n        await runner.runNode(\"esm\");\n    }\n\n    if (testTypes.has(TestType.cjs)) {\n        await project.buildSource(\"cjs\");\n        await project.buildTests(\"cjs\");\n        await runner.runNode(\"cjs\");\n    }\n\n    if (testTypes.has(TestType.web)) {\n        await buildEsm();\n        await runner.runWeb(manual);\n    }\n\n    progress.shutdown();\n\n    if (args.forceExit) {\n        process.exit(0);\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,OAAO,WAAW;AAClB,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAE3B,IAAK,WAAL,kBAAKA,cAAL;AACI,EAAAA,UAAA,SAAM;AACN,EAAAA,UAAA,SAAM;AACN,EAAAA,UAAA,SAAM;AAHL,SAAAA;AAAA,GAAA;AAML,eAAsB,KAAK,OAAO,QAAQ,MAAM;AAC5C,QAAM,YAAY,oBAAI,IAAc;AAEpC,MAAI,SAAS;AAEb,QAAM,OAAO,MAAM,MAAM,QAAQ,IAAI,CAAC,EACjC,MAAM,yDAAyD,EAC/D,OAAO,UAAU;AAAA,IACd,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,IACN,UAAU;AAAA,EACd,CAAC,EACA,OAAO,OAAO;AAAA,IACX,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,IACN,UAAU;AAAA,EACd,CAAC,EACA,OAAO,QAAQ;AAAA,IACZ,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,SAAS;AAAA,EACb,CAAC,EACA,OAAO,SAAS,EAAE,OAAO,KAAK,MAAM,UAAU,UAAU,sCAAsC,CAAC,EAC/F,OAAO,QAAQ,EAAE,OAAO,KAAK,MAAM,UAAU,UAAU,sCAAsC,CAAC,EAC9F,OAAO,UAAU,EAAE,OAAO,KAAK,MAAM,WAAW,UAAU,qCAAqC,CAAC,EAChG,OAAO,WAAW,EAAE,MAAM,WAAW,UAAU,qDAAqD,CAAC,EACrG,OAAO,YAAY,EAAE,MAAM,WAAW,UAAU,iCAAiC,CAAC,EAClF,OAAO,cAAc,EAAE,MAAM,WAAW,UAAU,0CAA0C,CAAC,EAC7F,QAAQ,KAAK,8BAA8B,EAC3C,QAAQ,OAAO,mCAAmC,MAAM,UAAU,IAAI,eAAY,CAAC,EACnF,QAAQ,OAAO,wCAAwC,MAAM,UAAU,IAAI,eAAY,CAAC,EACxF,QAAQ,OAAO,4BAA4B,MAAM,UAAU,IAAI,eAAY,CAAC,EAC5E,QAAQ,UAAU,sDAAsD,MAAM;AAC3E,cAAU,IAAI,eAAY;AAC1B,aAAS;AAAA,EACb,CAAC,EACA,OAAO,EAAE;AAEd,QAAM,UAAU,IAAI,QAAQ,KAAK,MAAM;AAGvC,MAAI,CAAC,UAAU,MAAM;AACjB,QAAI,QAAQ,IAAI,KAAK;AACjB,gBAAU,IAAI,eAAY;AAAA,IAC9B;AACA,QAAI,QAAQ,IAAI,KAAK;AACjB,gBAAU,IAAI,eAAY;AAAA,IAC9B;AACA,QAAI,KAAK,KAAK;AACV,gBAAU,IAAI,eAAY;AAAA,IAC9B;AAAA,EACJ;AAEA,MAAI,WAAW;AACf,iBAAe,WAAW;AACtB,QAAI,UAAU;AACV;AAAA,IACJ;AAEA,UAAM,QAAQ,YAAY,KAAK;AAC/B,UAAM,QAAQ,WAAW,KAAK;AAE9B,eAAW;AAAA,EACf;AAEA,QAAM,WAAW,QAAQ,IAAI,MAAM,SAAS;AAC5C,QAAM,SAAS,IAAI,WAAW,QAAQ,KAAK,UAAU,IAAI;AAEzD,MAAI,UAAU,IAAI,eAAY,GAAG;AAC7B,UAAM,SAAS;AACf,UAAM,OAAO,QAAQ,KAAK;AAAA,EAC9B;AAEA,MAAI,UAAU,IAAI,eAAY,GAAG;AAC7B,UAAM,QAAQ,YAAY,KAAK;AAC/B,UAAM,QAAQ,WAAW,KAAK;AAC9B,UAAM,OAAO,QAAQ,KAAK;AAAA,EAC9B;AAEA,MAAI,UAAU,IAAI,eAAY,GAAG;AAC7B,UAAM,SAAS;AACf,UAAM,OAAO,OAAO,MAAM;AAAA,EAC9B;AAEA,WAAS,SAAS;AAElB,MAAI,KAAK,WAAW;AAChB,YAAQ,KAAK,CAAC;AAAA,EAClB;AACJ;",
  "names": ["TestType"]
}
