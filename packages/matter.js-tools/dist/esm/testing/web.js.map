{
  "version": 3,
  "sources": ["../../../src/testing/web.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { build } from \"esbuild\";\nimport express from \"express\";\nimport { stat } from \"fs/promises\";\nimport http from \"http\";\nimport { AddressInfo } from \"net\";\nimport { relative } from \"path\";\nimport { Browser, chromium, ConsoleMessage, Page } from \"playwright\";\nimport { ignoreError } from \"../util/errors.js\";\nimport { Package } from \"../util/package.js\";\nimport { TestOptions } from \"./options.js\";\nimport { ConsoleProxyReporter, Reporter } from \"./reporter.js\";\nimport type { TestRunner } from \"./runner.js\";\n\nconst libraries = [\"chai\", \"chai-as-promised\", \"elliptic\", \"bn.js\", \"ansi-colors\"];\n\nexport async function testWeb(runner: TestRunner, manual: boolean) {\n    await buildLibraries();\n\n    const files = runner.loadFiles(\"esm\");\n    const server = await new Promise<http.Server>((resolve, reject) => {\n        try {\n            const server = express()\n                .use(express.static(Package.workspace.resolve(\"node_modules\")))\n                .use(express.static(Package.workspace.path))\n                .get(\"/\", (_, res) => res.send(buildIndex(files)))\n                .listen(0, \"localhost\", () => resolve(server));\n        } catch (e) {\n            reject(e);\n        }\n    });\n\n    const addr = server.address() as AddressInfo;\n    let ip = addr.address;\n    if (ip.indexOf(\":\") !== -1) {\n        ip = `[${ip}]`;\n    }\n    const url = `http://${ip}:${addr.port}/`;\n\n    await new Promise<void>((resolve, reject) => {\n        server.on(\"error\", reject);\n        server.on(\"close\", resolve);\n\n        if (manual) {\n            console.log(`Run tests manually at ${url}`);\n        } else {\n            testInBrowser(url, runner.reporter, runner.options)\n                .then(() => {\n                    server.close(() => {\n                        // Hmm the close event above doesn't fire\n                        resolve();\n                    });\n                })\n                .catch(error => {\n                    reject(error);\n                });\n        }\n    });\n}\n\nasync function testInBrowser(url: string, reporter: Reporter, options: TestOptions) {\n    async function setup() {\n        const browser = await chromium.launch();\n        const page = await browser.newPage();\n        return { browser, page };\n    }\n\n    async function run({ browser, page }: { browser: Browser; page: Page }) {\n        await page.goto(url);\n        await page.evaluate(options => (globalThis as any).MatterTest.auto(options), options);\n        await browser.close();\n    }\n\n    await new Promise<void>((resolve, reject) => {\n        setup()\n            .then(cx => {\n                cx.page.on(\"console\", consoleHandler(reporter));\n                cx.page.on(\"pageerror\", error => reject(error));\n                return cx;\n            })\n            .then(run)\n            .then(resolve)\n            .catch(reject);\n    });\n}\n\nfunction consoleHandler(reporter: Reporter) {\n    return (message: ConsoleMessage) => {\n        const type = message.type();\n        switch (type) {\n            case \"log\":\n            case \"debug\":\n            case \"info\":\n            case \"error\":\n            case \"warn\":\n            case \"trace\":\n                break;\n\n            default:\n                return;\n        }\n\n        const text = message.text();\n\n        // If it's not an encoded reporter update, write to normal console\n        if (type !== \"log\" || !text.startsWith(ConsoleProxyReporter.FLAG)) {\n            console[type](text);\n            return;\n        }\n\n        // Invoke reporter\n        const args: string[] = JSON.parse(text.slice(ConsoleProxyReporter.FLAG.length));\n        const method = (reporter as any)[args[0]];\n        if (typeof method !== \"function\") {\n            throw new Error(`Invalid encoded reporter update method ${args[0]}`);\n        }\n        method.call(reporter, ...args.slice(1));\n    };\n}\n\nfunction buildIndex(files: string[]) {\n    const importMap = JSON.stringify({\n        imports: Object.fromEntries(\n            libraries.map(name => {\n                let path = `/packages/matter.js-tools/build/lib/${name}`;\n                if (!path.endsWith(\".js\")) {\n                    path = `${path}.js`;\n                }\n                return [name, path];\n            }),\n        ),\n    });\n\n    files = files.map(file => `/${relative(Package.workspace.path, file)}`);\n    const imports = files.map(file => `import ${JSON.stringify(file)}`).join(\"\\n    \");\n\n    return `<!DOCTYPE html>\n<html>\n<head>\n    <title>Matter.js Web Testing</title>\n    <link rel=\"stylesheet\" href=\"mocha/mocha.css\">\n</head>\n<body>\n    <div id=\"mocha\"><h1><a href=\"javascript:MatterTest.start()\">run tests</a></h1></div>\n    <script src=\"mocha/mocha.js\"></script>\n    <script type=\"importmap\">\n    ${importMap}\n    </script>\n    <script type=\"module\">\n    ${imports}\n    </script>\n</body>\n</html>`;\n}\n\nasync function buildLibraries() {\n    for (const name of libraries) {\n        let path = `build/lib/${name}`;\n        if (!path.endsWith(\".js\")) {\n            path = `${path}.js`;\n        }\n        const outfile = Package.tools.resolve(path);\n\n        if ((await ignoreError(\"ENOENT\", async () => stat(outfile)))?.isFile()) {\n            continue;\n        }\n\n        await build({\n            entryPoints: [Package.workspace.resolve(`node_modules/${name}`)],\n            bundle: true,\n            format: \"esm\",\n            outfile,\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["server", "options"]
}
