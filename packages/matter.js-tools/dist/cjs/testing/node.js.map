{
  "version": 3,
  "sources": ["../../../src/testing/node.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mkdir, writeFile } from \"fs/promises\";\nimport Mocha from \"mocha\";\nimport { relative } from \"path\";\nimport { adaptReporter, generalSetup } from \"./mocha.js\";\nimport { TestOptions } from \"./options.js\";\nimport type { TestRunner } from \"./runner.js\";\n\n// Load globals so settings get applied\nimport \"./global-definitions.js\";\n\nexport async function testNode(runner: TestRunner, format: \"cjs\" | \"esm\") {\n    generalSetup(Mocha);\n\n    const mocha = new Mocha({\n        inlineDiffs: true,\n        reporter: adaptReporter(Mocha, format.toUpperCase(), runner.reporter),\n    });\n\n    TestOptions.apply(mocha, runner.options);\n\n    const files = runner.loadFiles(format);\n    files.forEach(path => {\n        path = relative(process.cwd(), path);\n        if (path[0] !== \".\") {\n            path = `./${path}`;\n        }\n        mocha.addFile(path);\n    });\n\n    await mocha.loadFilesAsync();\n\n    const profiler = new Profiler();\n    if (runner.options.profile) {\n        await profiler.start();\n    }\n\n    await new Promise<Mocha.Runner>(resolve => {\n        const runner = mocha.run(() => resolve(runner));\n    });\n\n    if (runner.options.profile) {\n        await profiler.stop(runner.pkg.resolve(\"build/profiles\"));\n    }\n}\n\n// We use string concatenation to prevent TS from trying to find profiler\n// library types.  It doesn't build on all platforms we support and doesn't\n// provide type declarations when it doesn't build\n//\n// This interface acts as a replacement for proper types\nexport interface Profilerish {\n    setGenerateType(value: number): void;\n    startProfiling(): void;\n    stopProfiling(): {\n        export(callback: (error: any, result: string) => any): void;\n    };\n}\n\n// v8-profiler-next doesn't manage switching node versions well.  Load\n// dynamically so it doesn't interfere if it's not built and we're not\n// profiling\nclass Profiler {\n    #profiler?: Profilerish;\n\n    async start() {\n        this.#profiler = (await import(\"\" + \"v8-profiler-next\")) as Profilerish;\n        this.#profiler.setGenerateType(1);\n        this.#profiler.startProfiling();\n    }\n\n    async stop(outputDir: string) {\n        if (!this.#profiler) {\n            return;\n        }\n\n        const profile = this.#profiler.stopProfiling();\n\n        const result = await new Promise<string>((accept, reject) =>\n            profile.export((error, result) => {\n                if (error) {\n                    reject(error);\n                } else if (!result) {\n                    reject(new Error(\"No profile error or result\"));\n                } else {\n                    accept(result);\n                }\n            }),\n        );\n\n        await mkdir(outputDir, { recursive: true });\n        await writeFile(`${outputDir}/test-${new Date().toISOString().slice(0, 19)}.cpuprofile`, result);\n\n        this.#profiler = undefined;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAAiC;AACjC,mBAAkB;AAClB,kBAAyB;AACzB,IAAAA,gBAA4C;AAC5C,qBAA4B;AAI5B,gCAAO;AAdP;AAAA;AAAA;AAAA;AAAA;AAgBA,eAAsB,SAAS,QAAoB,QAAuB;AACtE,kCAAa,aAAAC,OAAK;AAElB,QAAM,QAAQ,IAAI,aAAAA,QAAM;AAAA,IACpB,aAAa;AAAA,IACb,cAAU,6BAAc,aAAAA,SAAO,OAAO,YAAY,GAAG,OAAO,QAAQ;AAAA,EACxE,CAAC;AAED,6BAAY,MAAM,OAAO,OAAO,OAAO;AAEvC,QAAM,QAAQ,OAAO,UAAU,MAAM;AACrC,QAAM,QAAQ,UAAQ;AAClB,eAAO,sBAAS,QAAQ,IAAI,GAAG,IAAI;AACnC,QAAI,KAAK,CAAC,MAAM,KAAK;AACjB,aAAO,KAAK,IAAI;AAAA,IACpB;AACA,UAAM,QAAQ,IAAI;AAAA,EACtB,CAAC;AAED,QAAM,MAAM,eAAe;AAE3B,QAAM,WAAW,IAAI,SAAS;AAC9B,MAAI,OAAO,QAAQ,SAAS;AACxB,UAAM,SAAS,MAAM;AAAA,EACzB;AAEA,QAAM,IAAI,QAAsB,aAAW;AACvC,UAAMC,UAAS,MAAM,IAAI,MAAM,QAAQA,OAAM,CAAC;AAAA,EAClD,CAAC;AAED,MAAI,OAAO,QAAQ,SAAS;AACxB,UAAM,SAAS,KAAK,OAAO,IAAI,QAAQ,gBAAgB,CAAC;AAAA,EAC5D;AACJ;AAkBA,MAAM,SAAS;AAAA,EACX;AAAA,EAEA,MAAM,QAAQ;AACV,SAAK,YAAa,MAAM,OAAO,kBAAuB;AACtD,SAAK,UAAU,gBAAgB,CAAC;AAChC,SAAK,UAAU,eAAe;AAAA,EAClC;AAAA,EAEA,MAAM,KAAK,WAAmB;AAC1B,QAAI,CAAC,KAAK,WAAW;AACjB;AAAA,IACJ;AAEA,UAAM,UAAU,KAAK,UAAU,cAAc;AAE7C,UAAM,SAAS,MAAM,IAAI;AAAA,MAAgB,CAAC,QAAQ,WAC9C,QAAQ,OAAO,CAAC,OAAOC,YAAW;AAC9B,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,WAAW,CAACA,SAAQ;AAChB,iBAAO,IAAI,MAAM,4BAA4B,CAAC;AAAA,QAClD,OAAO;AACH,iBAAOA,OAAM;AAAA,QACjB;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,cAAM,uBAAM,WAAW,EAAE,WAAW,KAAK,CAAC;AAC1C,cAAM,2BAAU,GAAG,SAAS,UAAS,oBAAI,KAAK,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,eAAe,MAAM;AAE/F,SAAK,YAAY;AAAA,EACrB;AACJ;",
  "names": ["import_mocha", "Mocha", "runner", "result"]
}
