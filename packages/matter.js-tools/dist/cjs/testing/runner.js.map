{
  "version": 3,
  "sources": ["../../../src/testing/runner.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport colors from \"ansi-colors\";\nimport { glob } from \"glob\";\nimport { relative } from \"path\";\nimport { Package } from \"../util/package.js\";\nimport { Progress } from \"../util/progress.js\";\nimport { listSupportFiles } from \"./files.js\";\nimport { testNode } from \"./node.js\";\nimport { TestOptions } from \"./options.js\";\nimport { ProgressReporter, Reporter } from \"./reporter.js\";\nimport { testWeb } from \"./web.js\";\n\nexport class TestRunner {\n    readonly reporter: Reporter;\n    private spec = Array<string>();\n\n    constructor(\n        readonly pkg: Package,\n        readonly progress: Progress,\n        readonly options: TestOptions,\n    ) {\n        this.reporter = new (class extends ProgressReporter {\n            constructor() {\n                super(progress);\n            }\n\n            override failRun(message: string, stack?: string) {\n                fatal(message, stack);\n            }\n        })();\n\n        if (options.spec === undefined) {\n            this.spec = [\"test/**/*Test.ts\"];\n        } else if (Array.isArray(options.spec)) {\n            this.spec = options.spec;\n        } else {\n            this.spec = [options.spec];\n        }\n    }\n\n    async runNode(format: \"esm\" | \"cjs\" = \"esm\") {\n        await this.run(this.progress, () => testNode(this, format));\n    }\n\n    async runWeb(manual = false) {\n        await this.run(this.progress, () => testWeb(this, manual));\n    }\n\n    loadFiles(format: \"esm\" | \"cjs\") {\n        const tests = [];\n        for (let spec of this.spec) {\n            spec = spec.replace(/\\.ts$/, \".js\");\n            spec = relative(this.pkg.path, spec);\n            if (!spec.startsWith(\".\") && !spec.startsWith(\"build/\") && !spec.startsWith(\"dist/\")) {\n                spec = `build/${format}/${spec}`;\n            }\n            spec = this.pkg.resolve(spec);\n\n            // Glob only understands forward-slash as separator because reasons\n            spec = spec.replace(/\\\\/g, \"/\");\n\n            tests.push(...glob.sync(spec));\n        }\n\n        if (!tests.length) {\n            fatal(`No files match ${this.spec.join(\", \")}`);\n        }\n\n        return [...listSupportFiles(format), ...tests];\n    }\n\n    private async run(progress: Progress, runner: () => Promise<void>) {\n        await runner();\n        if (progress.status !== Progress.Status.Success) {\n            fatal(`Test ${progress.status.toLowerCase()}, aborting`);\n        }\n    }\n}\n\nfunction fatal(message: string, stack?: string) {\n    process.stderr.write(colors.redBright(`\\n\\n${message}\\n\\n`));\n    if (stack) {\n        stack = stack.replace(/^ {4}/gms, \"\");\n        process.stderr.write(`${stack}\\n\\n`);\n    }\n    process.exit(1);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAAmB;AACnB,kBAAqB;AACrB,kBAAyB;AAEzB,sBAAyB;AACzB,mBAAiC;AACjC,kBAAyB;AAEzB,sBAA2C;AAC3C,iBAAwB;AAfxB;AAAA;AAAA;AAAA;AAAA;AAiBO,MAAM,WAAW;AAAA,EAIpB,YACa,KACA,UACA,SACX;AAHW;AACA;AACA;AALb,SAAQ,OAAO,MAAc;AAOzB,SAAK,WAAW,IAAK,cAAc,iCAAiB;AAAA,MAChD,cAAc;AACV,cAAM,QAAQ;AAAA,MAClB;AAAA,MAES,QAAQ,SAAiB,OAAgB;AAC9C,cAAM,SAAS,KAAK;AAAA,MACxB;AAAA,IACJ,EAAG;AAEH,QAAI,QAAQ,SAAS,QAAW;AAC5B,WAAK,OAAO,CAAC,kBAAkB;AAAA,IACnC,WAAW,MAAM,QAAQ,QAAQ,IAAI,GAAG;AACpC,WAAK,OAAO,QAAQ;AAAA,IACxB,OAAO;AACH,WAAK,OAAO,CAAC,QAAQ,IAAI;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEA,MAAM,QAAQ,SAAwB,OAAO;AACzC,UAAM,KAAK,IAAI,KAAK,UAAU,UAAM,sBAAS,MAAM,MAAM,CAAC;AAAA,EAC9D;AAAA,EAEA,MAAM,OAAO,SAAS,OAAO;AACzB,UAAM,KAAK,IAAI,KAAK,UAAU,UAAM,oBAAQ,MAAM,MAAM,CAAC;AAAA,EAC7D;AAAA,EAEA,UAAU,QAAuB;AAC7B,UAAM,QAAQ,CAAC;AACf,aAAS,QAAQ,KAAK,MAAM;AACxB,aAAO,KAAK,QAAQ,SAAS,KAAK;AAClC,iBAAO,sBAAS,KAAK,IAAI,MAAM,IAAI;AACnC,UAAI,CAAC,KAAK,WAAW,GAAG,KAAK,CAAC,KAAK,WAAW,QAAQ,KAAK,CAAC,KAAK,WAAW,OAAO,GAAG;AAClF,eAAO,SAAS,MAAM,IAAI,IAAI;AAAA,MAClC;AACA,aAAO,KAAK,IAAI,QAAQ,IAAI;AAG5B,aAAO,KAAK,QAAQ,OAAO,GAAG;AAE9B,YAAM,KAAK,GAAG,iBAAK,KAAK,IAAI,CAAC;AAAA,IACjC;AAEA,QAAI,CAAC,MAAM,QAAQ;AACf,YAAM,kBAAkB,KAAK,KAAK,KAAK,IAAI,CAAC,EAAE;AAAA,IAClD;AAEA,WAAO,CAAC,OAAG,+BAAiB,MAAM,GAAG,GAAG,KAAK;AAAA,EACjD;AAAA,EAEA,MAAc,IAAI,UAAoB,QAA6B;AAC/D,UAAM,OAAO;AACb,QAAI,SAAS,WAAW,yBAAS,OAAO,SAAS;AAC7C,YAAM,QAAQ,SAAS,OAAO,YAAY,CAAC,YAAY;AAAA,IAC3D;AAAA,EACJ;AACJ;AAEA,SAAS,MAAM,SAAiB,OAAgB;AAC5C,UAAQ,OAAO,MAAM,mBAAAA,QAAO,UAAU;AAAA;AAAA,EAAO,OAAO;AAAA;AAAA,CAAM,CAAC;AAC3D,MAAI,OAAO;AACP,YAAQ,MAAM,QAAQ,YAAY,EAAE;AACpC,YAAQ,OAAO,MAAM,GAAG,KAAK;AAAA;AAAA,CAAM;AAAA,EACvC;AACA,UAAQ,KAAK,CAAC;AAClB;",
  "names": ["colors"]
}
