{
  "version": 3,
  "sources": ["../../../src/util/package.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { readFileSync, statSync } from \"fs\";\nimport { readdir, stat } from \"fs/promises\";\nimport { dirname, relative, resolve } from \"path\";\nimport { ignoreError, ignoreErrorSync } from \"./errors.js\";\nimport { Progress } from \"./progress.js\";\n\nfunction findJson(filename: string, path: string = \".\", title?: string) {\n    path = resolve(path);\n    while (true) {\n        const json = ignoreErrorSync(\"ENOENT\", () => JSON.parse(readFileSync(resolve(path, filename)).toString()));\n        if (json) {\n            if (title === undefined || json.name === title) {\n                return { root: path, json };\n            }\n        }\n        const parent = dirname(path);\n        if (parent === path) {\n            throw new Error(`Could not locate ${title ?? filename}`);\n        }\n        path = parent;\n    }\n}\n\nexport class Package {\n    path: string;\n    json: PackageJson;\n    esm: boolean;\n    cjs: boolean;\n    src: boolean;\n    tests: boolean;\n    library: boolean;\n\n    constructor({\n        path = \".\",\n        name,\n    }: {\n        path?: string;\n        name?: string;\n    } = {}) {\n        const { root, json } = findJson(\"package.json\", path, name);\n        this.path = root;\n        this.json = json;\n\n        const { esm, cjs } = selectFormats(this.json);\n        this.esm = esm;\n        this.cjs = cjs;\n\n        this.src = !!ignoreErrorSync(\"ENOENT\", () => statSync(this.resolve(\"src\")).isDirectory());\n        this.tests = !!ignoreErrorSync(\"ENOENT\", () => statSync(this.resolve(\"test\")).isDirectory());\n\n        this.library = !!(this.json.main || this.json.module || this.json.exports);\n    }\n\n    get name() {\n        return this.json.name;\n    }\n\n    resolve(path: string) {\n        return resolve(this.path, path);\n    }\n\n    relative(path: string) {\n        return relative(this.path, path);\n    }\n\n    start(what: string) {\n        const progress = new Progress();\n        progress.startup(what, this);\n        return progress;\n    }\n\n    async lastModified(...paths: string[]) {\n        return this.lastModifiedAbsolute(paths.map(p => this.resolve(p)));\n    }\n\n    private async lastModifiedAbsolute(paths: string[]) {\n        let mtime = 0;\n        await Promise.all(\n            paths.map(async p => {\n                const stats = await ignoreError(\"ENOENT\", async () => await stat(p));\n                if (!stats) {\n                    return;\n                }\n\n                let thisMtime;\n                if (stats.isDirectory()) {\n                    const paths = (await readdir(p)).map(p2 => resolve(p, p2));\n                    thisMtime = await this.lastModifiedAbsolute(paths);\n                } else {\n                    thisMtime = stats.mtimeMs;\n                }\n                if (thisMtime > mtime) {\n                    mtime = thisMtime;\n                }\n            }),\n        );\n        return mtime;\n    }\n\n    get dependencies() {\n        let result = Array<string>();\n        for (const type of [\"dependencies\", \"devDependencies\", \"peerDependencies\"]) {\n            if (typeof this.json[type] === \"object\") {\n                result = [...result, ...Object.keys(this.json[type])];\n            }\n        }\n        return [...new Set(result)];\n    }\n\n    static set workingDir(wd: string) {\n        workingDir = wd;\n    }\n\n    static node(name: string) {\n        return new Package({\n            path: this.workspace.resolve(`node_modules/${name}`),\n        });\n    }\n\n    static get workspace() {\n        if (!workspace) {\n            workspace = find(workingDir, pkg => Array.isArray(pkg.json.workspaces));\n        }\n        return workspace;\n    }\n\n    static get tools() {\n        if (!tools) {\n            tools = new Package({ path: this.workspace.resolve(\"packages/matter.js-tools\") });\n        }\n        return tools;\n    }\n}\n\nexport type PackageJson = {\n    name: string;\n    version: string;\n    [key: string]: any;\n};\n\nlet workingDir = \".\";\nlet workspace: Package | undefined;\nlet tools: Package | undefined;\n\nfunction find(startDir: string, selector: (pkg: Package) => boolean): Package {\n    let pkg = new Package({ path: startDir });\n    while (!selector(pkg)) {\n        pkg = new Package({ path: dirname(pkg.path) });\n    }\n    return pkg;\n}\n\nfunction selectFormats(json: any) {\n    let esm: boolean, cjs: boolean;\n\n    if (json.type === \"module\") {\n        esm = true;\n        cjs =\n            (json.main !== undefined && json.module !== undefined) ||\n            !!Object.values(json.exports ?? {}).find((exp: any) => exp.require);\n    } else {\n        cjs = true;\n        esm = !!json.module || !!Object.values(json.exports ?? {}).find((exp: any) => exp.import);\n    }\n\n    return { esm, cjs };\n}\n"],
  "mappings": "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",
  "names": ["paths"]
}
