{
  "version": 3,
  "sources": ["../../../src/testing/mocha.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Can't import Mocha in the browser so just import type here\nimport type MochaType from \"mocha\";\nimport { TestOptions } from \"./options.js\";\nimport { ConsoleProxyReporter, FailureDetail, Reporter } from \"./reporter.js\";\n\nexport function generalSetup(Mocha: typeof MochaType) {\n    // White text, 16-bit and 256-bit green background\n    Mocha.reporters.Base.colors[\"diff added inline\"] = \"97;42;48;5;22\" as any;\n\n    // White text, 16-bit and 256-bit red background\n    Mocha.reporters.Base.colors[\"diff removed inline\"] = \"97;41;48;5;52\" as any;\n\n    // Some of our test suites have setup/teardown logic that logs profusely.\n    // Hide these logs unless something goes wrong\n    async function onlyLogFailure(fn: () => any) {\n        if (!MatterHooks) {\n            throw new Error(\"Matter hooks not loaded\");\n        }\n\n        const logs = Array<string>();\n        const existingSink = MatterHooks.loggerSink;\n        try {\n            MatterHooks.loggerSink = (_, message) => {\n                logs.push(message);\n            };\n            return await fn();\n        } catch (e) {\n            process.stdout.write(logs.join(\"\\n\"));\n            throw e;\n        } finally {\n            MatterHooks.loggerSink = existingSink;\n        }\n    }\n\n    function filterLogs(hook: \"beforeAll\" | \"afterAll\" | \"beforeEach\" | \"afterEach\") {\n        const actual = Mocha.Suite.prototype[hook] as (this: any, fn: Mocha.Func) => any;\n        Mocha.Suite.prototype[hook] = function (this: any, fn: Mocha.Func) {\n            return actual.call(this, async function (this: any, ...args: any) {\n                return await onlyLogFailure(() => fn.apply(this, args));\n            });\n        } as any;\n    }\n\n    filterLogs(\"beforeAll\");\n    filterLogs(\"afterAll\");\n    filterLogs(\"beforeEach\");\n    filterLogs(\"afterEach\");\n\n    // Reset mocks before each suite.  Suites could conceivably have callbacks\n    // that occur across tests.  If individual tests need a reset the suite\n    // needs to handle itself.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const actualBeforeAll = Mocha.Suite.prototype.beforeAll;\n    Mocha.Suite.prototype.beforeAll = function (this: Mocha.Context, ...args: any) {\n        MockTime.reset();\n        return actualBeforeAll.apply(this, args);\n    };\n}\n\nexport function adaptReporter(Mocha: typeof MochaType, title: string, reporter: Reporter) {\n    const RUNNER = Mocha.Runner.constants;\n\n    let logs = Array<string>();\n\n    class MochaReporter extends Mocha.reporters.Base {\n        constructor(runner: Mocha.Runner) {\n            super(runner);\n\n            runner.once(RUNNER.EVENT_RUN_BEGIN, () => {\n                if (!MatterHooks) {\n                    throw new Error(\"Matter hooks not loaded\");\n                }\n                MatterHooks.loggerSink = (_, message) => {\n                    logs.push(message);\n                };\n                reporter.beginRun(title, this.translatedStats);\n            });\n\n            runner.on(RUNNER.EVENT_SUITE_BEGIN, suite => {\n                reporter.beginSuite(suite.titlePath(), this.translatedStats);\n            });\n\n            runner.on(RUNNER.EVENT_TEST_BEGIN, test => {\n                logs = (test as any).logs = [];\n                reporter.beginTest(test.title, this.translatedStats);\n            });\n\n            runner.on(RUNNER.EVENT_TEST_FAIL, (test, error) => {\n                if ((test as any).type === \"hook\") {\n                    const { message, stack } = parseError(error);\n                    reporter.failRun(`Aborting due to error in ${test.title}: ${message}`, stack);\n                    throw error;\n                }\n                const logs = (test as any).logs as string[];\n                reporter.failTest(test.title, translateError(error, logs));\n            });\n\n            runner.once(RUNNER.EVENT_RUN_END, () => {\n                if (!MatterHooks) {\n                    throw new Error(\"Matter hooks not loaded\");\n                }\n                MatterHooks.loggerSink = undefined;\n                reporter.endRun(this.translatedStats);\n            });\n        }\n\n        get translatedStats() {\n            return {\n                total: this.runner.total,\n                complete: this.stats.tests,\n                failures: this.stats.failures,\n            };\n        }\n    }\n\n    function translateError(error: any, logs: string[]) {\n        let diff: string | undefined;\n\n        const { message, stack } = parseError(error);\n\n        if (error.expected && error.actual) {\n            diff = Mocha.reporters.Base.generateDiff(error.actual.toString(), error.expected.toString());\n            diff = diff.trim().replace(/^ {6}/gms, \"\");\n        }\n\n        const result = { message } as FailureDetail;\n        if (diff) {\n            result.diff = diff;\n        }\n        if (stack) {\n            result.stack = stack;\n        }\n        if (logs.length) {\n            result.logs = logs.join(\"\\n\");\n        }\n\n        return result;\n    }\n\n    return MochaReporter;\n}\n\nfunction parseError(error: Error) {\n    let message, stack;\n\n    if (error === undefined || error === null) {\n        message = `(error is ${error})`;\n    } else {\n        message = error.message;\n    }\n\n    if (error.stack) {\n        let lines = error.stack.trim().split(\"\\n\");\n        if (!message) {\n            message = lines[0];\n        }\n        lines = lines.filter(line => line.match(/:\\d+:\\d+\\)?/));\n        if (lines.length) {\n            stack = lines.map(line => line.trim()).join(\"\\n\");\n        }\n    } else if (error.message) {\n        message = error.message;\n    } else {\n        message = error.toString();\n    }\n\n    message = message.trim().replace(/Error: /, \"\");\n\n    if (message.endsWith(\":\")) {\n        message = message.slice(0, message.length - 1);\n    }\n\n    return { message, stack };\n}\n\nexport function browserSetup(mocha: BrowserMocha) {\n    mocha.setup(\"bdd\");\n\n    (globalThis as any).MatterTest = {\n        // Starts Mocha (called by clicking link)\n        start: () => {\n            const root = document.querySelector(\"#mocha\");\n            if (root) {\n                root.innerHTML = \"\";\n            }\n            return mocha.run();\n        },\n\n        // Start Mocha, proxying reporting through console to Playwright and\n        // completing once Mocha has finished\n        auto: async function (options: TestOptions) {\n            TestOptions.apply(mocha, options);\n            mocha.reporter(adaptReporter(Mocha, \"Web\", new ConsoleProxyReporter()));\n            return new Promise<void>(accept => {\n                const runner = this.start();\n                runner.on(\"end\", accept);\n            });\n        },\n    };\n}\n"],
  "mappings": "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",
  "names": ["Mocha", "logs"]
}
