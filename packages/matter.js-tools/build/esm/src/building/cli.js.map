{
  "version": 3,
  "sources": ["../../../src/building/cli.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport { Builder, Target } from \"./builder.js\";\nimport { Graph } from \"./graph.js\";\nimport { Project } from \"./project.js\";\n\nenum Mode {\n    BuildProject,\n    BuildWorkspace,\n    DisplayGraph,\n}\n\nexport async function main(argv = process.argv) {\n    const targets = Array<Target>();\n    let mode = Mode.BuildProject;\n\n    const args = await yargs(hideBin(argv))\n        .usage(\"Builds packages adhering to matter.js standards.\")\n        .option(\"prefix\", { alias: \"p\", default: \".\", type: \"string\", describe: \"specify build directory\" })\n        .option(\"clean\", { alias: \"c\", default: false, type: \"boolean\", describe: \"clean before build\" })\n        .option(\"workspaces\", { alias: \"w\", default: false, type: \"boolean\", describe: \"build all workspace packages\" })\n        .command(\"*\", \"build types and both JS files\", () => {})\n        .command(\"clean\", \"remove build and dist directories\", () => targets.push(Target.clean))\n        .command(\"types\", \"build type definitions\", () => targets.push(Target.types))\n        .command(\"esm\", \"build JS (ES6 modules)\", () => targets.push(Target.esm))\n        .command(\"cjs\", \"build JS (CommonJS modules)\", () => targets.push(Target.cjs))\n        .command(\"graph\", \"display the workspace graph\", () => (mode = Mode.DisplayGraph))\n        .wrap(Math.min(process.stdout.columns, 80))\n        .strict().argv;\n\n    if (mode === Mode.BuildProject && args.workspaces) {\n        mode = Mode.BuildWorkspace;\n    }\n\n    function builder() {\n        return new Builder({ ...args, targets: [...targets] });\n    }\n\n    switch (mode as Mode) {\n        case Mode.BuildProject:\n            const project = new Project(args.prefix);\n            await builder().build(project);\n            break;\n\n        case Mode.BuildWorkspace:\n            await (await Graph.load()).build(builder());\n            break;\n\n        case Mode.DisplayGraph:\n            (await Graph.load()).display();\n            break;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,OAAO,WAAW;AAClB,SAAS,eAAe;AACxB,SAAS,SAAS,cAAc;AAChC,SAAS,aAAa;AACtB,SAAS,eAAe;AAExB,IAAK,OAAL,kBAAKA,UAAL;AACI,EAAAA,YAAA;AACA,EAAAA,YAAA;AACA,EAAAA,YAAA;AAHC,SAAAA;AAAA,GAAA;AAML,eAAsB,KAAK,OAAO,QAAQ,MAAM;AAC5C,QAAM,UAAU,MAAc;AAC9B,MAAI,OAAO;AAEX,QAAM,OAAO,MAAM,MAAM,QAAQ,IAAI,CAAC,EACjC,MAAM,kDAAkD,EACxD,OAAO,UAAU,EAAE,OAAO,KAAK,SAAS,KAAK,MAAM,UAAU,UAAU,0BAA0B,CAAC,EAClG,OAAO,SAAS,EAAE,OAAO,KAAK,SAAS,OAAO,MAAM,WAAW,UAAU,qBAAqB,CAAC,EAC/F,OAAO,cAAc,EAAE,OAAO,KAAK,SAAS,OAAO,MAAM,WAAW,UAAU,+BAA+B,CAAC,EAC9G,QAAQ,KAAK,iCAAiC,MAAM;AAAA,EAAC,CAAC,EACtD,QAAQ,SAAS,qCAAqC,MAAM,QAAQ,KAAK,OAAO,KAAK,CAAC,EACtF,QAAQ,SAAS,0BAA0B,MAAM,QAAQ,KAAK,OAAO,KAAK,CAAC,EAC3E,QAAQ,OAAO,0BAA0B,MAAM,QAAQ,KAAK,OAAO,GAAG,CAAC,EACvE,QAAQ,OAAO,+BAA+B,MAAM,QAAQ,KAAK,OAAO,GAAG,CAAC,EAC5E,QAAQ,SAAS,+BAA+B,MAAO,OAAO,oBAAkB,EAChF,KAAK,KAAK,IAAI,QAAQ,OAAO,SAAS,EAAE,CAAC,EACzC,OAAO,EAAE;AAEd,MAAI,SAAS,wBAAqB,KAAK,YAAY;AAC/C,WAAO;AAAA,EACX;AAEA,WAAS,UAAU;AACf,WAAO,IAAI,QAAQ,EAAE,GAAG,MAAM,SAAS,CAAC,GAAG,OAAO,EAAE,CAAC;AAAA,EACzD;AAEA,UAAQ,MAAc;AAAA,IAClB,KAAK;AACD,YAAM,UAAU,IAAI,QAAQ,KAAK,MAAM;AACvC,YAAM,QAAQ,EAAE,MAAM,OAAO;AAC7B;AAAA,IAEJ,KAAK;AACD,aAAO,MAAM,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC;AAC1C;AAAA,IAEJ,KAAK;AACD,OAAC,MAAM,MAAM,KAAK,GAAG,QAAQ;AAC7B;AAAA,EACR;AACJ;",
  "names": ["Mode"]
}
