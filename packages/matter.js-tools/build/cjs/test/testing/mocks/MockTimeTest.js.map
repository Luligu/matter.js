{
  "version": 3,
  "sources": ["../../../../../test/testing/mocks/MockTimeTest.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst FAKE_TIME = 36000000;\n\ndescribe(\"MockTime\", () => {\n    beforeEach(() => MockTime.reset(FAKE_TIME));\n\n    describe(\"now\", () => {\n        it(\"returns the fake date\", () => {\n            const result = MockTime.now();\n\n            expect(result.getTime()).equal(FAKE_TIME);\n        });\n    });\n\n    describe(\"nowMs\", () => {\n        it(\"returns the fake time\", () => {\n            const result = MockTime.nowMs();\n\n            expect(result).equal(FAKE_TIME);\n        });\n    });\n\n    describe(\"advanceTime\", () => {\n        it(\"advances the time by the duration specified\", async () => {\n            await MockTime.advance(45);\n\n            expect(MockTime.nowMs()).equal(FAKE_TIME + 45);\n        });\n    });\n\n    describe(\"getPeriodicTimer\", () => {\n        it(\"returns a periodic timer that will call a callback periodically\", async () => {\n            let firedTime;\n\n            const result = MockTime.getPeriodicTimer(30, () => (firedTime = MockTime.nowMs()));\n            expect(result.isRunning).equal(false);\n\n            result.start();\n\n            expect(result.isRunning).equal(true);\n            expect(firedTime).equal(undefined);\n\n            await MockTime.advance(45);\n\n            expect(firedTime).equal(FAKE_TIME + 30);\n\n            await MockTime.advance(20);\n\n            expect(firedTime).equal(FAKE_TIME + 60);\n\n            expect(result.isRunning).equal(true);\n\n            result.stop();\n            expect(result.isRunning).equal(false);\n        });\n\n        it(\"returns a periodic timer that can be stopped\", async () => {\n            let firedTime;\n\n            const result = MockTime.getPeriodicTimer(30, () => (firedTime = MockTime.nowMs()));\n            result.start();\n            result.stop();\n\n            expect(firedTime).equal(undefined);\n\n            await MockTime.advance(45);\n\n            expect(firedTime).equal(undefined);\n            expect(result.isRunning).equal(false);\n        });\n    });\n\n    describe(\"getTimer\", () => {\n        it(\"returns a timer that will call a callback in the future\", async () => {\n            let firedTime;\n\n            const result = MockTime.getTimer(30, () => (firedTime = MockTime.nowMs()));\n            expect(result.isRunning).equal(false);\n            result.start();\n            expect(result.isRunning).equal(true);\n\n            expect(firedTime).equal(undefined);\n\n            await MockTime.advance(45);\n\n            expect(firedTime).equal(FAKE_TIME + 30);\n            expect(result.isRunning).equal(false);\n        });\n\n        it(\"returns a timer that can be stopped\", async () => {\n            let firedTime;\n\n            const result = MockTime.getTimer(30, () => (firedTime = MockTime.nowMs()));\n            expect(result.isRunning).equal(false);\n            result.start();\n            expect(result.isRunning).equal(true);\n            result.stop();\n            expect(result.isRunning).equal(false);\n\n            expect(firedTime).equal(undefined);\n\n            await MockTime.advance(45);\n\n            expect(firedTime).equal(undefined);\n            expect(result.isRunning).equal(false);\n        });\n    });\n});\n"],
  "mappings": ";AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,MAAM,YAAY;AAElB,SAAS,YAAY,MAAM;AACvB,aAAW,MAAM,SAAS,MAAM,SAAS,CAAC;AAE1C,WAAS,OAAO,MAAM;AAClB,OAAG,yBAAyB,MAAM;AAC9B,YAAM,SAAS,SAAS,IAAI;AAE5B,aAAO,OAAO,QAAQ,CAAC,EAAE,MAAM,SAAS;AAAA,IAC5C,CAAC;AAAA,EACL,CAAC;AAED,WAAS,SAAS,MAAM;AACpB,OAAG,yBAAyB,MAAM;AAC9B,YAAM,SAAS,SAAS,MAAM;AAE9B,aAAO,MAAM,EAAE,MAAM,SAAS;AAAA,IAClC,CAAC;AAAA,EACL,CAAC;AAED,WAAS,eAAe,MAAM;AAC1B,OAAG,+CAA+C,YAAY;AAC1D,YAAM,SAAS,QAAQ,EAAE;AAEzB,aAAO,SAAS,MAAM,CAAC,EAAE,MAAM,YAAY,EAAE;AAAA,IACjD,CAAC;AAAA,EACL,CAAC;AAED,WAAS,oBAAoB,MAAM;AAC/B,OAAG,mEAAmE,YAAY;AAC9E,UAAI;AAEJ,YAAM,SAAS,SAAS,iBAAiB,IAAI,MAAO,YAAY,SAAS,MAAM,CAAE;AACjF,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AAEpC,aAAO,MAAM;AAEb,aAAO,OAAO,SAAS,EAAE,MAAM,IAAI;AACnC,aAAO,SAAS,EAAE,MAAM,MAAS;AAEjC,YAAM,SAAS,QAAQ,EAAE;AAEzB,aAAO,SAAS,EAAE,MAAM,YAAY,EAAE;AAEtC,YAAM,SAAS,QAAQ,EAAE;AAEzB,aAAO,SAAS,EAAE,MAAM,YAAY,EAAE;AAEtC,aAAO,OAAO,SAAS,EAAE,MAAM,IAAI;AAEnC,aAAO,KAAK;AACZ,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AAAA,IACxC,CAAC;AAED,OAAG,gDAAgD,YAAY;AAC3D,UAAI;AAEJ,YAAM,SAAS,SAAS,iBAAiB,IAAI,MAAO,YAAY,SAAS,MAAM,CAAE;AACjF,aAAO,MAAM;AACb,aAAO,KAAK;AAEZ,aAAO,SAAS,EAAE,MAAM,MAAS;AAEjC,YAAM,SAAS,QAAQ,EAAE;AAEzB,aAAO,SAAS,EAAE,MAAM,MAAS;AACjC,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AAAA,IACxC,CAAC;AAAA,EACL,CAAC;AAED,WAAS,YAAY,MAAM;AACvB,OAAG,2DAA2D,YAAY;AACtE,UAAI;AAEJ,YAAM,SAAS,SAAS,SAAS,IAAI,MAAO,YAAY,SAAS,MAAM,CAAE;AACzE,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AACpC,aAAO,MAAM;AACb,aAAO,OAAO,SAAS,EAAE,MAAM,IAAI;AAEnC,aAAO,SAAS,EAAE,MAAM,MAAS;AAEjC,YAAM,SAAS,QAAQ,EAAE;AAEzB,aAAO,SAAS,EAAE,MAAM,YAAY,EAAE;AACtC,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AAAA,IACxC,CAAC;AAED,OAAG,uCAAuC,YAAY;AAClD,UAAI;AAEJ,YAAM,SAAS,SAAS,SAAS,IAAI,MAAO,YAAY,SAAS,MAAM,CAAE;AACzE,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AACpC,aAAO,MAAM;AACb,aAAO,OAAO,SAAS,EAAE,MAAM,IAAI;AACnC,aAAO,KAAK;AACZ,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AAEpC,aAAO,SAAS,EAAE,MAAM,MAAS;AAEjC,YAAM,SAAS,QAAQ,EAAE;AAEzB,aAAO,SAAS,EAAE,MAAM,MAAS;AACjC,aAAO,OAAO,SAAS,EAAE,MAAM,KAAK;AAAA,IACxC,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
