{
  "version": 3,
  "sources": ["../../../src/building/typescript.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { existsSync } from \"fs\";\nimport { glob } from \"glob\";\nimport { dirname } from \"path\";\nimport ts from \"typescript\";\nimport { Package } from \"../util/package.js\";\nimport { BuildError, InternalBuildError } from \"./error.js\";\n\n/**\n * Implements Typescript validation and declaration emit using tsc API.\n */\nexport class Typescript {\n    private host: ts.CompilerHost;\n\n    private constructor(\n        private pkg: Package,\n        private options: ts.CompilerOptions,\n    ) {\n        options = {\n            ...options,\n\n            rootDir: this.pkg.path,\n        };\n\n        this.host = ts.createIncrementalCompilerHost(options);\n        const baseOptions = this.getCompilerOptions(Package.tools.resolve(\"tsconfig.base.json\"));\n        this.options = {\n            ...baseOptions,\n\n            incremental: true,\n            isolatedModules: true,\n            tsBuildInfoFile: pkg.resolve(\"build/tsbuildinfo\"),\n            rootDir: this.pkg.path,\n\n            // So this guy is interesting.  It reduces redundant work and\n            // drastically speeds things up so seems worthwhile.  May want to\n            // enable in some nightly process but I think we're safe enough\n            // as is\n            skipLibCheck: true,\n\n            ...options,\n        };\n\n        delete options.composite;\n        if (this.pkg.src) {\n            this.loadPackageOptions(\"src/tsconfig.json\");\n        }\n\n        if (this.pkg.tests) {\n            this.loadPackageOptions(\"test/tsconfig.json\");\n        }\n    }\n\n    static emitDeclarations(pkg: Package) {\n        new Typescript(pkg, {\n            outDir: pkg.resolve(\"build/types\"),\n            emitDeclarationOnly: true,\n            sourceMap: true,\n            declarationMap: true,\n        }).run();\n    }\n\n    static validateTypes(pkg: Package) {\n        new Typescript(pkg, {\n            noEmit: true,\n        }).run();\n    }\n\n    private run() {\n        const sources = Array<string>();\n\n        if (this.pkg.src) {\n            sources.push(...glob.sync(this.pkg.resolve(\"src/**/*.ts\").replace(/\\\\/g, \"/\")));\n        }\n        if (this.pkg.tests) {\n            sources.push(...glob.sync(this.pkg.resolve(\"test/**/*.ts\").replace(/\\\\/g, \"/\")));\n        }\n\n        const program = ts.createIncrementalProgram({\n            rootNames: sources,\n            options: this.options,\n            host: this.host,\n        });\n\n        // See https://github.com/microsoft/TypeScript/issues/31849\n        const diagnostics = [\n            ...program.getConfigFileParsingDiagnostics(),\n            ...program.getSyntacticDiagnostics(),\n            ...program.getOptionsDiagnostics(),\n            ...program.getSemanticDiagnostics(),\n        ];\n\n        if (!this.options.noEmit) {\n            diagnostics.push(...program.emit().diagnostics);\n        }\n\n        this.passTscErrors(diagnostics);\n    }\n\n    private getCompilerOptions(filename: string) {\n        filename = this.pkg.resolve(filename);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        const file = ts.readConfigFile(filename, ts.sys.readFile);\n        this.passTscError(file.error);\n        const config = ts.parseJsonConfigFileContent(file.config, ts.sys, dirname(filename));\n        this.passTscError(config.errors && config.errors[0]);\n        return config.options;\n    }\n\n    private passTscError(diagnostic: undefined | ts.Diagnostic) {\n        if (diagnostic) {\n            throw new InternalBuildError(ts.formatDiagnostic(diagnostic, this.host));\n        }\n    }\n\n    private passTscErrors(diagnostics: undefined | readonly ts.Diagnostic[]) {\n        if (!diagnostics) {\n            return;\n        }\n\n        if (!diagnostics.length) {\n            return;\n        }\n\n        let formatted = ts.formatDiagnosticsWithColorAndContext(diagnostics, this.host);\n\n        // Strangely there are not newlines between errors in this output like\n        // there is when you run tsc from the command line.  Use the \"light\n        // blue\" ANSI escape code as an injection point for an additional\n        // newline\n        // eslint-disable-next-line no-control-regex\n        formatted = formatted.replace(/\\u001b\\[96m/gms, \"\\n\\u001b[96m\");\n\n        throw new BuildError(formatted);\n    }\n\n    /**\n     * As we largely configure based on convention, we mostly ignore\n     * tsconfig.json files in project directories.  The limited number of\n     * project-specific options we allow load here.\n     */\n    private loadPackageOptions(path: string) {\n        const filename = this.pkg.resolve(path);\n        if (!existsSync(filename)) {\n            // Package tsconfigs are optional\n            return;\n        }\n\n        const options = this.getCompilerOptions(path);\n\n        delete options?.composite;\n\n        const types = options?.types;\n        if (types) {\n            if (this.options.types) {\n                const merged = new Set(this.options.types);\n                for (const type of types) {\n                    merged.add(type);\n                }\n                this.options.types = [...merged];\n            } else {\n                this.options.types = types;\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["ts"]
}
