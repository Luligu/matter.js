{
  "version": 3,
  "sources": ["../../../src/building/builder.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport colors from \"ansi-colors\";\nimport { Progress } from \"../util/progress.js\";\nimport { BuildError } from \"./error.js\";\nimport { Project } from \"./project.js\";\n\nexport enum Target {\n    clean = \"clean\",\n    types = \"types\",\n    esm = \"esm\",\n    cjs = \"cjs\",\n}\n\nexport interface Options {\n    targets?: Target[];\n    prefix?: string;\n    clean?: boolean;\n}\n\n/**\n * High-level build coordination.\n *\n * Warning: This class is intended for command line use and process.exit if\n * things go wrong.\n */\nexport class Builder {\n    unconditional: boolean;\n\n    constructor(private options: Options) {\n        this.unconditional = options.clean || options.targets?.indexOf(Target.clean) !== -1;\n    }\n\n    public async build(project: Project) {\n        const progress = project.pkg.start(\"Building\");\n\n        try {\n            await this.doBuild(project, progress);\n        } catch (e: any) {\n            progress.failure(`Unexpected build error`);\n            progress.shutdown();\n            process.stderr.write(`${e.stack ?? e.message}\\n\\n`);\n            process.exit(1);\n        }\n\n        progress.shutdown();\n    }\n\n    private async doBuild(project: Project, progress: Progress) {\n        const targets = this.selectTargets(project);\n\n        if (targets.has(Target.clean) || this.options.clean) {\n            await progress.run(\"Clean\", () => project.clean());\n        }\n\n        if (targets.has(Target.types)) {\n            try {\n                if (project.pkg.library) {\n                    await progress.run(`Generate ${colors.bold(\"type declarations\")}`, () =>\n                        project.buildDeclarations(),\n                    );\n                    await progress.run(`Install ${colors.bold(\"type declarations\")}`, () =>\n                        project.installDeclarations(),\n                    );\n                } else {\n                    await progress.run(`Validating ${colors.bold(\"types\")}`, () => project.validateTypes());\n                }\n            } catch (e) {\n                if (e instanceof BuildError) {\n                    progress.failure(\"Terminating due to type errors\");\n                    process.stderr.write(e.diagnostics);\n                    process.exit(1);\n                }\n                throw e;\n            }\n        }\n\n        if (targets.has(Target.esm)) {\n            await this.transpile(project, progress, Target.esm);\n        }\n\n        if (targets.has(Target.cjs)) {\n            await this.transpile(project, progress, Target.cjs);\n        }\n\n        // Only update timestamp when there are no explicit targets so we know\n        // it's a full build\n        if (!this.options.targets?.length) {\n            await project.recordBuildTime();\n        }\n    }\n\n    private async transpile(project: Project, progress: Progress, format: \"esm\" | \"cjs\") {\n        const fmt = format.toUpperCase();\n        await progress.run(`Transpile ${colors.bold(\"library\")} to ${colors.bold(fmt)}`, () =>\n            project.buildSource(format),\n        );\n        if (project.pkg.tests) {\n            await progress.run(`Transpile ${colors.bold(\"tests\")} to ${colors.bold(fmt)}`, () =>\n                project.buildTests(format),\n            );\n        }\n    }\n\n    private selectTargets(project: Project) {\n        const targets = new Set<string>(this.options.targets);\n\n        if (!targets.size) {\n            targets.add(Target.types);\n\n            if (project.pkg.esm) {\n                targets.add(Target.esm);\n            }\n\n            if (project.pkg.cjs) {\n                targets.add(Target.cjs);\n            }\n        } else {\n            if (!project.pkg.esm) {\n                targets.delete(Target.esm);\n            }\n\n            if (!project.pkg.cjs) {\n                targets.delete(Target.cjs);\n            }\n        }\n\n        return targets;\n    }\n}\n"],
  "mappings": "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",
  "names": ["Target", "colors"]
}
