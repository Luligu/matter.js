{
  "version": 3,
  "sources": ["../../../../src/testing/mocks/logging.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\ninterface LoggerLike {\n    format: string;\n    log(level: number, message: string): void;\n}\n\nexport interface MockLogger {\n    emitAll: boolean;\n}\n\nexport const TheMockLogger: MockLogger = {\n    emitAll: false,\n};\n\nexport function loggerSetup(Logger: LoggerLike) {\n    // Currently everywhere we run tests supports ANSI escape codes for\n    // colorization.  This includes:\n    //\n    // - Node console\n    // - Github actions\n    // - Headless browser -> node console\n    // - VS code/webstorm terminal\n    //\n    // Should this become a PITA we can add an option to disable\n    Logger.format = \"ansi\";\n\n    let messageBuffer: [number, string][] | undefined;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const defaultLog = Logger.log;\n\n    function passMessage(args: [number, string]) {\n        defaultLog.apply(Logger, args);\n    }\n\n    function interceptingLogger(...args: [number, string]) {\n        let emitAll = TheMockLogger.emitAll;\n        if (MatterHooks?.loggerSink) {\n            MatterHooks.loggerSink(...args);\n        } else if (!emitAll) {\n            if (messageBuffer) {\n                messageBuffer.push(args);\n            } else {\n                emitAll = true;\n            }\n        }\n\n        if (emitAll) {\n            passMessage(args);\n        }\n    }\n\n    Logger.log = interceptingLogger;\n\n    // Divert log messages for test duration\n    beforeEach(function () {\n        if (!TheMockLogger.emitAll) {\n            messageBuffer = [];\n        }\n    });\n\n    // Emit log messages only if the test fails\n    afterEach(function () {\n        if (messageBuffer?.length) {\n            if (this.currentTest?.isFailed()) {\n                for (const args of messageBuffer) {\n                    passMessage(args);\n                }\n            }\n            messageBuffer = undefined;\n        }\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeO,MAAM,gBAA4B;AAAA,EACrC,SAAS;AACb;AAEO,SAAS,YAAY,QAAoB;AAU5C,SAAO,SAAS;AAEhB,MAAI;AAGJ,QAAM,aAAa,OAAO;AAE1B,WAAS,YAAY,MAAwB;AACzC,eAAW,MAAM,QAAQ,IAAI;AAAA,EACjC;AAEA,WAAS,sBAAsB,MAAwB;AACnD,QAAI,UAAU,cAAc;AAC5B,QAAI,aAAa,YAAY;AACzB,kBAAY,WAAW,GAAG,IAAI;AAAA,IAClC,WAAW,CAAC,SAAS;AACjB,UAAI,eAAe;AACf,sBAAc,KAAK,IAAI;AAAA,MAC3B,OAAO;AACH,kBAAU;AAAA,MACd;AAAA,IACJ;AAEA,QAAI,SAAS;AACT,kBAAY,IAAI;AAAA,IACpB;AAAA,EACJ;AAEA,SAAO,MAAM;AAGb,aAAW,WAAY;AACnB,QAAI,CAAC,cAAc,SAAS;AACxB,sBAAgB,CAAC;AAAA,IACrB;AAAA,EACJ,CAAC;AAGD,YAAU,WAAY;AAClB,QAAI,eAAe,QAAQ;AACvB,UAAI,KAAK,aAAa,SAAS,GAAG;AAC9B,mBAAW,QAAQ,eAAe;AAC9B,sBAAY,IAAI;AAAA,QACpB;AAAA,MACJ;AACA,sBAAgB;AAAA,IACpB;AAAA,EACJ,CAAC;AACL;",
  "names": []
}
