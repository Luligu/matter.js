{
  "version": 3,
  "sources": ["../../../src/testing/reporter.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2023 Project CHIP Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport colors from \"ansi-colors\";\nimport { Progress } from \"../util/progress.js\";\n\nexport type Stats = {\n    total: number;\n    complete: number;\n    failures: number;\n};\n\nexport interface Reporter {\n    beginRun(name: string, stats: Stats): void;\n    beginSuite(name: string[], stats: Stats): void;\n    beginTest(name: string, stats: Stats): void;\n    failTest(name: string, detail: FailureDetail): void;\n    endRun(stats: Stats): void;\n    failRun(message: string, stack?: string): void;\n}\n\nexport type FailureDetail = {\n    message: string;\n    diff?: string;\n    stack?: string;\n    logs?: string;\n};\n\nexport type Failure = {\n    suite: string[];\n    test: string;\n    detail: FailureDetail;\n};\n\nexport abstract class ProgressReporter implements Reporter {\n    private run = \"\";\n    private suite = Array<string>();\n    private failures = Array<Failure>();\n    private lastTitle?: string;\n\n    constructor(private progress: Progress) {}\n\n    beginRun(name: string): void {\n        this.run = name;\n    }\n\n    beginSuite(name: string[]): void {\n        this.suite = name;\n    }\n\n    beginTest(_name: string, stats: Stats): void {\n        // Only update once per suite to keep the line count down in GH action\n        // logs\n        const title = this.suite[0];\n        if (this.lastTitle !== title) {\n            this.lastTitle = title;\n            this.progress.update(this.summarize(stats), title);\n        }\n    }\n\n    failTest(name: string, detail: FailureDetail) {\n        this.failures.push({\n            suite: this.suite,\n            test: name,\n            detail,\n        });\n    }\n\n    abstract failRun(message: string, stack?: string): void;\n\n    endRun(stats: Stats): void {\n        if (this.failures.length) {\n            this.progress.failure(this.summarize(stats));\n            this.dumpFailures();\n        } else if (!stats.complete) {\n            this.progress.failure(\"No tests found\");\n        } else {\n            this.progress.success(this.summarize(stats));\n        }\n    }\n\n    private summarize(stats: Stats) {\n        const complete = colors.dim(`${stats.complete}/${stats.total}`);\n        const failures = stats.failures ? colors.redBright(` ${stats.failures.toString()} failed`) : \"\";\n        return `${colors.bold(this.run)} ${complete}${failures}`;\n    }\n\n    private dumpFailures() {\n        for (let i = 0; i < this.failures.length; i++) {\n            const failure = this.failures[i];\n            const index = colors.redBright(`Failure ${colors.bold((i + 1).toString())} of ${this.failures.length}`);\n            process.stdout.write(`\\n${index} ${failure.suite.join(\" \u27A1 \")} \u27A1 ${colors.bold(failure.test)}\\n\\n`);\n\n            process.stdout.write(`  ${failure.detail.message}\\n\\n`);\n\n            if (failure.detail.diff) {\n                process.stdout.write(`      ${failure.detail.diff.replace(/\\n/gm, \"\\n      \")}\\n\\n`);\n            }\n\n            if (failure.detail.stack) {\n                process.stdout.write(`  ${colors.dim(failure.detail.stack.replace(/\\n/gm, \"\\n  \"))}\\n\\n`);\n            }\n\n            if (failure.detail.logs) {\n                process.stdout.write(`  ${failure.detail.logs.replace(/\\n/gm, \"\\n  \")}\\n\\n`);\n            }\n        }\n    }\n}\n\nconst actualConsole = console;\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst actualLog = actualConsole.log;\n\nfunction proxy(...args: any[]) {\n    actualLog.call(actualConsole, `${ConsoleProxyReporter.FLAG}${JSON.stringify(args)}`);\n}\n\nexport class ConsoleProxyReporter implements Reporter {\n    static FLAG = \"<<REPORT>> \";\n\n    beginRun(name: string, stats: Stats) {\n        proxy(\"beginRun\", name, stats);\n    }\n\n    beginSuite(name: string[], stats: Stats) {\n        proxy(\"beginSuite\", name, stats);\n    }\n\n    beginTest(name: string, stats: Stats) {\n        proxy(\"beginTest\", name, stats);\n    }\n\n    endRun(stats: Stats) {\n        proxy(\"endRun\", stats);\n    }\n\n    failTest(name: string, detail: FailureDetail) {\n        proxy(\"failTest\", name, detail);\n    }\n\n    failRun(message: string, stack?: string) {\n        proxy(\"failRun\", message, stack);\n    }\n}\n"],
  "mappings": "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",
  "names": ["colors"]
}
